@page "/locations"
@inject HttpClient Http
@inject NavigationManager NavManager
@inject ReturnUrlManager ReturnUrlManager
@implements IDisposable

<div class="container">
    <nav class="navbar navbar-dark bg-secondary rounded mb-3">
        <span class="navbar-brand">Asukohad</span>
    </nav>

    <LocationFilter @ref="_locationFilter" />

    @if (_locations == null)
    {
        <p>Loading...</p>
    }
    else
    {
        <table class="table">
            <thead>
                <tr>
                    <th>Kood</th>
                    <th>Nimi</th>
                    <th style="text-align: right;">Tooteid</th>
                    <th style="text-align: right;">Laos kokku</th>
                    <th style="text-align: right;">Reserv. kokku</th>
                    <th style="text-align: right;">Vabu kokku</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var location in _locations)
                {
                    <tr>
                        <td style="width: 15%;">@location.LocationCode</td>
                        <td style="width: 25%;">@location.LocationName</td>
                        <td style="width: 15%; text-align: right;">@ParseSpaceInsteadOfZero(location.TotalCount)</td>
                        <td style="width: 15%; text-align: right;">@ParseSpaceInsteadOfZero(location.TotalStockQuantity)</td>
                        <td style="width: 15%; text-align: right;">@ParseSpaceInsteadOfZero(location.TotalReservedQuantity)</td>
                        <td style="width: 15%; text-align: right;">@ParseSpaceInsteadOfZero(location.TotalFreeQuantity)</td>
                        <td>
                            <div class="d-flex">
                                <button class="btn btn-info btn-sm mr-3"
                                        @onclick="@(() => HandleInventorySelected(location.LocationId))">
                                    Laoseis
                                </button>
                                <button class="btn btn-warning btn-sm">Muuda</button>
                            </div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
</div>

@code {
    private IEnumerable<LocationListItemDto> _locations;
    private IEnumerable<LocationListItemDto> _cachedLocations;
    private LocationFilter _locationFilter;

    protected override async Task OnInitializedAsync()
    {
        _locations = await Http.GetFromJsonAsync<IEnumerable<LocationListItemDto>>("api/locations");
        _cachedLocations = _locations;

        NavManager.LocationChanged += HandleLocationChanged;

        UpdateFilters();
    }

    #region helpers
    private void UpdateFilters()
    {
        var filters = new List<Func<LocationListItemDto, bool>>();

        NavManager.TryGetQueryString<int>("locationtypeid", out var locationTypeId);

        if (locationTypeId > 0)
        {
            filters.Add(l => l.LocationTypeId == locationTypeId);
        }

        if (filters.Any())
        {
            _locations = _cachedLocations.Where(l => filters.All(filter => filter(l)));
        }
        else
        {
            _locations = _cachedLocations;
        }
    }

    string ParseSpaceInsteadOfZero(int someInt) => someInt > 0 ? someInt.ToString() : "";
    #endregion

    #region event handlers
    private void HandleLocationChanged(object sender, LocationChangedEventArgs args)
    {
        UpdateFilters();

        //for cases where the page was already open, but still the menu item of the same page was clicked
        //then synchronization (initialization) of the filter with the url of the menu item is needed
        if (args.IsNavigationIntercepted)
        {
            _locationFilter.Refresh();
        }

        StateHasChanged();
    }

    private void HandleInventorySelected(int locationId)
    {
        ReturnUrlManager.ReturnUrl = NavManager.ToBaseRelativePath(NavManager.Uri);
        NavManager.NavigateTo($"locations/{locationId}/inventory");
    }
    #endregion

    #region IDisposable
    public void Dispose() => NavManager.LocationChanged -= HandleLocationChanged;
    #endregion
}
