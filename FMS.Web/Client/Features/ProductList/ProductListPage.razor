@page "/products"
@inject HttpClient Http
@inject NavigationManager NavManager

<nav class="navbar navbar-dark bg-secondary rounded-top zindex-like-filter-drawer">
    <span class="navbar-brand">Tooted</span>
</nav>

<ProductFilter Options="@_options" OnOptionsChanged="@((p) => HandleFilterChanged(p))">
    <a class="btn btn-primary" href="products/add">Lisa toode</a>
</ProductFilter>

@if (_pagedProducts == null)
{
    <p>Loading...</p>
}
else
{
    <div class="grid my-5">
        @foreach (var product in _pagedProducts.Results)
        {
            <ProductCard Product="@product" OnSelected="@(() => HandleProductSelected(product.Id))" />
        }
    </div>

    <div class="d-flex justify-content-center">
        <Pager Result="@_pagedProducts" OnPageChanged="HandlePagerPageChanged" />
    </div>
}

@code {
    private PagedResult<ProductListDto> _pagedProducts;
    private ProductListOptions _options = new ProductListOptions { CurrentPage = 1, PageSize = 18 };

    protected override async Task OnInitializedAsync()
    {
        await UpdateList();
    }

    private async Task UpdateList()
    {
        var response = await Http.PostAsJsonAsync<ProductListOptions>("api/products", _options);
        if (response.IsSuccessStatusCode)
        {
            _pagedProducts = await response.Content.ReadFromJsonAsync<PagedResult<ProductListDto>>();
        }
    }

    private async Task HandlePagerPageChanged(int pageNo)
    {
        _options.CurrentPage = pageNo;
        await UpdateList();
    }

    private async Task HandleFilterChanged(ProductListOptions options)
    {
        _options = options;
        _options.CurrentPage = 1;
        await UpdateList();
    }

    private void HandleProductSelected(int productBaseId)
    {
        NavManager.NavigateTo($"products/edit/{productBaseId}");
    }
}
