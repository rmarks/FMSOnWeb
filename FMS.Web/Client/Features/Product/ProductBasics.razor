@inject HttpClient Http
@inject IMapper Mapper

@if (_dropdowns is null)
{
    <p>Loading...</p>
}
else
{
    <EditForm EditContext="@_editContext" OnValidSubmit="SaveForm">
        <FluentValidationValidator />

        <div class="row mb-3">
            <div class="col-auto">
                <div class="card" style="width: 268px;">
                    <img class="card-img" src="@_imagePath">
                </div>
            </div>

            <div class="col">
                <FormSection>
                    <FormFieldSet Width="col-2">
                        <label class="font-weight-bold text-secondary">Kood</label>
                        <InputText class="form-control" @bind-Value="@_editModel.Code" disabled="@IsInViewMode" />
                        <ValidationMessage For="@(() => _editModel.Code)" />
                    </FormFieldSet>
                    <FormFieldSet Width="col-4">
                        <label class="font-weight-bold text-secondary">Nimi</label>
                        <InputText class="form-control" @bind-Value="@_editModel.Name" disabled="@IsInViewMode" />
                        <ValidationMessage For="@(() => _editModel.Name)" />
                    </FormFieldSet>
                </FormSection>
            </div>
        </div>

        <div class="row">
            <div class="col-3">
                <FormSection>
                    <FormFieldSet>
                        <label class="font-weight-bold text-secondary">Olek</label>
                        <InputSelect class="form-control" @bind-Value="@_editModel.ProductStatusId" disabled="@IsInViewMode">
                            <option value="">-- Vali ---</option>
                            @foreach (var item in _dropdowns.ProductStatuses)
                                {
                                <option value="@item.Id">@item.Name</option>
                                }
                        </InputSelect>
                        <ValidationMessage For="@(() => _editModel.ProductStatusId)" />
                    </FormFieldSet>
                    <FormFieldSet>
                        <label class="font-weight-bold text-secondary">Lähtetüüp</label>
                        <InputSelect class="form-control" @bind-Value="@_editModel.ProductSourceTypeId" disabled="@IsInViewMode">
                            <option value="">-- Vali ---</option>
                            @foreach (var item in _dropdowns.ProductSourceTypes)
                                {
                                <option value="@item.Id">@item.Name</option>
                                }
                        </InputSelect>
                        <ValidationMessage For="@(() => _editModel.ProductSourceTypeId)" />
                    </FormFieldSet>
                    <FormFieldSet>
                        <label class="font-weight-bold text-secondary">Sihttüüp</label>
                        <InputSelect class="form-control" @bind-Value="@_editModel.ProductDestinationTypeId" disabled="@IsInViewMode">
                            <option value="">-- Vali ---</option>
                            @foreach (var item in _dropdowns.ProductDestinationTypes)
                                {
                                <option value="@item.Id">@item.Name</option>
                                }
                        </InputSelect>
                        <ValidationMessage For="@(() => _editModel.ProductDestinationTypeId)" />
                    </FormFieldSet>
                    <FormFieldSet>
                        <label class="font-weight-bold text-secondary">Materjal</label>
                        <InputSelect class="form-control" @bind-Value="@_editModel.ProductMaterialId" disabled="@IsInViewMode">
                            <option value="">-- Vali ---</option>
                            @foreach (var item in _dropdowns.ProductMaterials)
                                {
                                <option value="@item.Id">@item.Name</option>
                                }
                        </InputSelect>
                        <ValidationMessage For="@(() => _editModel.ProductMaterialId)" />
                    </FormFieldSet>
                </FormSection>
            </div>

            <div class="col-3">
                <FormSection>
                    <FormFieldSet>
                        <label class="font-weight-bold text-secondary">Tüüp</label>
                        <InputSelect class="form-control" Value="@_editModel.ProductTypeId" ValueChanged="@((p) => HandleProductTypeChanged(p))"
                                     ValueExpression="@(() => _editModel.ProductTypeId)" TValue="int?" disabled="@IsInViewMode">
                            <option value="">-- Vali ---</option>
                            @foreach (var item in _dropdowns.ProductTypes)
                            {
                                <option value="@item.Id">@item.Name</option>
                            }
                        </InputSelect>
                        <ValidationMessage For="@(() => _editModel.ProductTypeId)" />
                    </FormFieldSet>

                    <FormFieldSet>
                        <label class="font-weight-bold text-secondary">Grupp</label>
                        <InputSelect class="form-control" @bind-Value="@_editModel.ProductGroupId" disabled="@IsInViewMode">
                            <option value="">-- Vali ---</option>
                            @foreach (var item in GetFilteredProductGroups(_editModel.ProductTypeId))
                                {
                                <option value="@item.Id">@item.Name</option>
                                }
                        </InputSelect>
                        <ValidationMessage For="@(() => _editModel.ProductGroupId)" />
                    </FormFieldSet>

                    <FormFieldSet>
                        <label class="font-weight-bold text-secondary">Kaubamärk</label>
                        <InputSelect class="form-control" Value="@_editModel.ProductBrandId" ValueChanged="@((p) => HandleProductBrandChanged(p))"
                                     TValue="int?" ValueExpression="@(() => _editModel.ProductBrandId)" disabled="@IsInViewMode">
                            <option value="">-- Vali ---</option>
                            @foreach (var item in _dropdowns.ProductBrands)
                            {
                                <option value="@item.Id">@item.Name</option>
                            }
                        </InputSelect>
                    </FormFieldSet>

                    <FormFieldSet>
                        <label class="font-weight-bold text-secondary">Kollektsioon</label>
                        <InputSelect class="form-control" @bind-Value="@_editModel.ProductCollectionId" disabled="@IsInViewMode">
                            <option value="">-- Vali ---</option>
                            @foreach (var item in GetFilteredProductCollections(_editModel.ProductBrandId))
                                {
                                <option value="@item.Id">@item.Name</option>
                                }
                        </InputSelect>
                    </FormFieldSet>
                </FormSection>
            </div>

            <div class="col">
                <FormSection>
                    <label class="font-weight-bold text-secondary">Kommentaarid</label>
                    <InputTextArea class="form-control" @bind-Value="@_editModel.Comments" rows="12" disabled="@IsInViewMode" />
                </FormSection>
            </div>
        </div>

        <div class="mt-4 pt-2 border-top">
            <div class="row">
                <div class="offset-4 col-8 text-right">
                    <button class="btn btn-info" type="button" @onclick="@(() => _isInEditMode = true)" hidden="@_isInEditMode">Muuda</button>
                    <button class="btn btn-secondary" type="button" @onclick="CancelForm" hidden="@IsInViewMode">Loobu</button>
                    <button class="btn btn-warning" type="submit" hidden="@IsInViewMode">Salvesta</button>
                </div>
            </div>
        </div>
    </EditForm>
}

@code {
    private ProductBasicsDto _initialModel;
    private ProductBasicsDto _editModel;
    private EditContext _editContext;
    private ProductBasicsDropdowns _dropdowns;
    private string _imagePath = "img/products/BlankImage.png";
    private bool _isInEditMode = false;

    [Parameter] public int Id { get; set; }
    [Parameter] public EventCallback<int> IdChanged { get; set; }
    [Parameter] public EventCallback OnAddingCancelled { get; set; }

    private bool IsInViewMode => !_isInEditMode;

    protected override async Task OnInitializedAsync()
    {
        if (Id > 0)
        {
            _initialModel = await Http.GetFromJsonAsync<ProductBasicsDto>($"api/productbasics/{Id}");
            ResetEditForm(_initialModel);
            _imagePath = $"img/products/{_editModel.Code}.jpg";
        }
        else
        {
            ResetEditForm(new ProductBasicsDto());
            _isInEditMode = true;
        }

        _dropdowns = await Http.GetFromJsonAsync<ProductBasicsDropdowns>("api/productbasics/dropdowns");
    }

    #region event handlers
    private void CancelForm()
    {
        if (Id == 0)
        {
            OnAddingCancelled.InvokeAsync();
        }
        else
        {
            _isInEditMode = false;
            ResetEditForm(_initialModel);
        }
    }

    private async Task SaveForm()
    {
        if (Id == 0)
        {
            var response = await Http.PostAsJsonAsync<ProductBasicsDto>("api/productbasics", _editModel);
            if (response.IsSuccessStatusCode)
            {
                var dto = await response.Content.ReadFromJsonAsync<ProductBasicsDto>();
                ResetEditForm(dto);
                
                await IdChanged.InvokeAsync(dto.Id);
            }
        }
        else
        {
            var response = await Http.PutAsJsonAsync<ProductBasicsDto>($"api/productbasics/{Id}", _editModel);
            if (response.IsSuccessStatusCode)
            {
                ResetEditForm(_editModel);
            }
        }

        _isInEditMode = false;
    }

    private void HandleProductTypeChanged(int? id)
    {
        _editModel.ProductTypeId = id;
        _editModel.ProductGroupId = default;

        _editContext.NotifyFieldChanged(_editContext.Field(nameof(_editModel.ProductGroupId)));
    }

    private void HandleProductBrandChanged(int? id)
    {
        _editModel.ProductBrandId = id;
        _editModel.ProductCollectionId = default;

        _editContext.NotifyFieldChanged(_editContext.Field(nameof(_editModel.ProductCollectionId)));
    }
    #endregion

    #region helpers
    private void ResetEditForm(ProductBasicsDto sourceModel)
    {
        if (sourceModel is null) return;

        _editModel = Mapper.Map<ProductBasicsDto>(sourceModel);
        _editContext = new EditContext(_editModel);
    }

    private IEnumerable<ChildDropdownDto> GetFilteredProductGroups(int? productTypeId)
    {
        if (productTypeId > 0)
        {
            return _dropdowns.ProductGroups.Where(p => p.ParentId == productTypeId).ToList();
        }

        return Enumerable.Empty<ChildDropdownDto>();
    }

    private IEnumerable<ChildDropdownDto> GetFilteredProductCollections(int? productBrandId)
    {
        if (productBrandId > 0)
        {
            return _dropdowns.ProductCollections.Where(p => p.ParentId == productBrandId).ToList();
        }

        return Enumerable.Empty<ChildDropdownDto>();
    }
    #endregion
}
