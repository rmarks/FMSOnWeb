@page "/locations/{Id:int}/inventory"
@inject HttpClient HttpClient

<div>
    <nav class="navbar navbar-dark bg-secondary rounded-top zindex-like-filter-drawer">
        <span class="navbar-brand">@_locationName</span>
        <NavLink class="btn btn-primary ml-auto" href="locations/return">Tagasi</NavLink>
    </nav>

    <ProductFilter Filter="@_filter" OnSubmit="HandleFilterSubmitted" />

    @if (_pagedInventory is null)
    {
        <p>Loading...</p>
    }
    else
    {
        <InventoryDetails Item="@SelectedItem" />

        <div class="grid my-5">
            @foreach (var item in _pagedInventory.List)
            {
                <ProductCard Item="@item" OnSelected="HandleProductSelected" />
            }
        </div>

        <div class="d-flex justify-content-center">
            <Pager Result="@_pagedInventory" OnPageChanged="HandlePageChanged" />
        </div>
    }
</div>


@code {
    private PagedResult<LocationInventoryListVm>? _pagedInventory;
    private ProductFilterVm _filter = new ProductFilterVm { CurrentPage = 1, PageSize = 18 };
    private LocationInventoryListVm? _selectedItem;
    private string? _locationName;

    private LocationInventoryListVm? SelectedItem
    {
        get
        {
            var selectedItem = _selectedItem;

            if (selectedItem != null)
            {
                _selectedItem = null;
            }

            return selectedItem;
        }
    }

    [Parameter]
    public int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await UpdateList(true);
    }

    #region helpers
    private async Task UpdateList(bool isLocationNameRequired = false)
    {
        var httpResponse = await HttpClient.PostAsJsonAsync<GetLocationInventoryListRequest>(
            GetLocationInventoryListRequest.RouteTemplate,
            new GetLocationInventoryListRequest(Id, _filter, isLocationNameRequired));

        if (httpResponse.IsSuccessStatusCode)
        {
            var response = await httpResponse.Content.ReadFromJsonAsync<GetLocationInventoryListRequest.Response>();
            if (response is null) throw new Exception("Can't load inventory list.");

            if (response.LocationName is not null) _locationName = response.LocationName;
            
            _pagedInventory = response.PagedInventory;
        }
    }
    #endregion

    #region event handlers
    private async Task HandlePageChanged(int pageNo)
    {
        _filter.CurrentPage = pageNo;
        await UpdateList();
    }

    private async Task HandleFilterSubmitted(ProductFilterVm filter)
    {
        _filter = filter;
        _filter.CurrentPage = 1;
        await UpdateList();
    }

    private void HandleProductSelected(LocationInventoryListVm item)
    {
        _selectedItem = item;
    }
    #endregion
}
