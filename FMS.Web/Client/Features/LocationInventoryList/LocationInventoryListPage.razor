@page "/locations/{Id:int}/inventory"
@inject HttpClient Http

<div>
    <nav class="navbar navbar-dark bg-secondary rounded mb-3">
        <span class="navbar-brand">Ladu</span>
        <NavLink class="btn btn-primary ml-auto" href="locations/return">Tagasi</NavLink>
    </nav>

    <h5 class="bg-light p-2 mb-5 text-secondary">Filter</h5>

    @if (_inventory == null)
    {
        <p>Loading...</p>
    }
    else
    {
        <ProductDetails Item="@SelectedItem" />

        <div class="grid mb-5">
            @foreach (var item in _inventory.Results)
            {
                <ProductCard Item="@item" OnSelected="HandleProductSelected" />
            }
        </div>

        <div class="d-flex justify-content-center">
            <Pager Result="@_inventory" OnPageChanged="HandlePageChanged" />
        </div>
    }
</div>


@code {
    private PagedResult<ProductInventoryInLocationDto> _inventory;
    private int _pageSize = 18;
    private ProductInventoryInLocationDto _selectedItem;

    private ProductInventoryInLocationDto SelectedItem
    {
        get
        {
            var selectedItem = _selectedItem;

            if (selectedItem != null)
            {
                _selectedItem = null;
            }

            return selectedItem;
        }
    }

    [Parameter]
    public int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadInventory(1);
    }

    #region helpers
    private async Task LoadInventory(int page)
    {
        _inventory = await Http.GetFromJsonAsync<PagedResult<ProductInventoryInLocationDto>>($"api/locationinventory/{Id}?page={page}&pagesize={_pageSize}");
    }
    #endregion

    #region event handlers
    private async Task HandlePageChanged(int page)
    {
        await LoadInventory(page);
    }

    private void HandleProductSelected(ProductInventoryInLocationDto item)
    {
        _selectedItem = item;
    }
    #endregion
}
