@page "/locations/{Id:int}/inventory"
@inject HttpClient Http

<div>
    <nav class="navbar navbar-dark bg-secondary rounded-top zindex-like-filter-drawer">
        <span class="navbar-brand">@_locationName</span>
        <NavLink class="btn btn-primary ml-auto" href="locations/return">Tagasi</NavLink>
    </nav>

    <InventoryFilter Options="@_options" OnOptionsChanged="@((p) => HandleFilterChanged(p))" />

    @if (_pagedInventory == null)
    {
        <p>Loading...</p>
    }
    else
    {
        <InventoryDetails Item="@SelectedItem" />

        <div class="grid my-5">
            @foreach (var item in _pagedInventory.Results)
            {
                <ProductCard Item="@item" OnSelected="HandleProductSelected" />
            }
        </div>

        <div class="d-flex justify-content-center">
            <Pager Result="@_pagedInventory" OnPageChanged="HandlePagerPageChanged" />
        </div>
    }
</div>


@code {
    private PagedResult<LocationInventoryListDto> _pagedInventory;
    private InventoryFilterOptions _options = new InventoryFilterOptions { CurrentPage = 1, PageSize = 18 };
    private LocationInventoryListDto _selectedItem;
    private string _locationName;

    private LocationInventoryListDto SelectedItem
    {
        get
        {
            var selectedItem = _selectedItem;

            if (selectedItem != null)
            {
                _selectedItem = null;
            }

            return selectedItem;
        }
    }

    [Parameter]
    public int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        //var response = await Http.PostAsJsonAsync<LocationInventoryListOptions>($"api/locationinventory/{Id}", _options);
        var response = await Http.PostAsJsonAsync<LocationInventoryListRequest>("api/locationinventory", new LocationInventoryListRequest(Id, _options, true));
        if (response.IsSuccessStatusCode)
        {
            var dto = await response.Content.ReadFromJsonAsync<LocationInventoryListRequest.Response>();
            _locationName = dto.LocationName;
            _pagedInventory = dto.PagedInventory;
        }
    }

    #region helpers
    private async Task UpdateList()
    {
        //var response = await Http.PostAsJsonAsync<LocationInventoryListOptions>($"api/locationinventory/{Id}/list", _options);
        var response = await Http.PostAsJsonAsync<LocationInventoryListRequest>("api/locationinventory", new LocationInventoryListRequest(Id, _options));
        if (response.IsSuccessStatusCode)
        {
            var dto = await response.Content.ReadFromJsonAsync<LocationInventoryListRequest.Response>();
            _pagedInventory = dto.PagedInventory;
        }
    }
    #endregion

    #region event handlers
    private async Task HandlePagerPageChanged(int pageNo)
    {
        _options.CurrentPage = pageNo;
        await UpdateList();
    }

    private async Task HandleFilterChanged(InventoryFilterOptions options)
    {
        _options = options;
        _options.CurrentPage = 1;
        await UpdateList();
    }

    private void HandleProductSelected(LocationInventoryListDto item)
    {
        _selectedItem = item;
    }
    #endregion
}
